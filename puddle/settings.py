"""
Django settings for puddle project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import pymysql
pymysql.install_as_MySQLdb()
import os
from dotenv import load_dotenv
# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--skz(7t7z0!e(+8ruag%o1u3r9)(ufoyepo%eqs7erapklfe&^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # <--- Set this to INFO or DEBUG
            'class': 'logging.StreamHandler',
            'formatter': 'simple', # Or 'verbose' if you want more detail
        },
        # You can add file handlers here for production if needed
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # <--- Set Django's default logger level
            'propagate': False, # Avoids sending logs to root logger multiple times
        },
        'payment': { # <--- Add a logger for your 'payment' app
            'handlers': ['console'],
            'level': 'INFO', # <--- Set your payment app's logger level
            'propagate': False,
        },
        # If you have other apps (e.g., 'cart', 'notifications'), you can add them too
        'notifications': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        '': { # This is the root logger, catches everything if not propagated
            'handlers': ['console'],
            'level': 'WARNING', # Default level for unhandled logs
        }
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Set root logger level
    },
}

ALLOWED_HOSTS = []

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'items',
    'dashboard',
    'conversation',
    'cart',
    'payment',
    'notifications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'puddle.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'puddle.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#         'OPTIONS': {
#             'timeout': 30,  # Set timeout to 20 seconds or higher
#         },
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Changed engine to postgresql
        'NAME': 'sneakerz_db',                     # Your database name
        'USER': 'django_user',                     # Your database user
        'PASSWORD': 'mysecretpgpassword',          # The password for that user
        'HOST': '127.0.0.1',                       # Docker containers are accessed via localhost IP
        'PORT': '5432',                            # Default PostgreSQL port
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'sneakerz_db',          # Your database name
#         'USER': 'django_user',          # Your database user
#         'PASSWORD': 'supersecret123!', # The password for that user
#         'HOST': '127.0.0.1',            # <--- CHANGE THIS FROM 'localhost' TO '127.0.0.1'
#         'PORT': '3306',                 # Default MySQL port
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#             'charset': 'utf8mb4',
#         }
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static",]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# stripe settings

# Stripe API Keys (for Development/Testing)
# Get from environment variables
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET') # Also for webhook secret

# Stripe Success and Cancel URLs (Relative to your domain)
STRIPE_SUCCESS_URL = '/payment/success/'
STRIPE_CANCEL_URL = '/payment/cancel/'

# These are where Stripe redirects the user after checkout
STRIPE_SUCCESS_URL = '/payment/success/'
STRIPE_CANCEL_URL = '/payment/cancel/'
